# API


{{- if .Objects}}

## Objects

WebGPU objects are referenced through blind handles, which are homogenous to pointers. The following objects are defined and detailed below:

{{    range .Objects}}
{{-     if not .IsStruct}}
 - [`WGPU{{.Name | PascalCase}}`](#WGPU{{.Name | PascalCase}})
{{-     end}}
{{-   end}}

{{    range $object := .Objects}}
{{-     if not .IsStruct}}

### {{.Name | PascalCase}} { #WGPU{{.Name | PascalCase}} }

{{.Doc}}

{{        range $method := .Methods}}

#### `wgpu{{$object.Name | PascalCase}}{{.Name | PascalCase}}` { #wgpu{{$object.Name | PascalCase}}{{.Name | PascalCase}} }

**Prototype:** `{{FunctionReturns .}} wgpu{{$object.Name | PascalCase}}{{.Name | PascalCase}}({{FunctionArgs . $object}})`

{{.Doc}}

**Arguments:**

 - TODO

{{          if .Returns}}

**Returns:** `{{FunctionReturns .}}` {{.Returns.Doc}}

{{          end}}
{{        end}}

 - `void wgpu{{.Name | PascalCase}}Reference(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}})`
 - `void wgpu{{.Name | PascalCase}}Release(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}})`

{{      end}}
{{    end}}
{{  end}}


{{- if .Structs}}

## Structures

{{    range .Structs}}
 - `WGPU{{.Name | PascalCase}}`
{{-   end}}
{{  end}}


{{- if .Enums}}

## Enumerations

**NB** All enumerations also have an extra values ending with `_Force32` that is here to ensure that all compilers use the same underlying representation for the enum values. This value must never be used.

{{  range $entry := .Enums}}
{{-   MComment .Doc 0}}
```C
enum WGPU{{.Name | PascalCase}} {
{{-   range $entryIndex, $_ := .Entries}}
{{-     MComment .Doc 4}}
{{-     $entryValue := 0}}
{{-     if eq .Value ""}}
{{-       $entryValue = $entryIndex}}
{{-     else}}
{{-       $entryValue = ParseUint .Value 16}}
{{-     end}}
    WGPU{{$entry.Name | PascalCase}}_{{.Name | PascalCase}} = {{printf "%s%.4X," $.EnumPrefix $entryValue}}
{{-   end}}
}
```
{{  end}}
{{  end}}


{{- if .Constants}}

## Constants

{{-   range .Constants}}
{{- MComment .Doc 0}}
 - `WGPU_{{.Name | ConstantCase}}` = `{{.Value | CValue}}`
{{-   end}}

{{  end}}

{{- if eq .Name "webgpu"}}

## Typedefs

 - `typedef uint32_t WGPUFlags`
 - `typedef uint32_t WGPUBool`

{{  end}}


{{- if .Objects}}

## Callback types

{{    range $object := .Objects}}
{{-     range $method := .Methods}}
{{-       if .ReturnsAsync}}
{{-         MComment .Doc 0}}
 - `typedef void (*WGPU{{$object.Name | PascalCase}}{{$method.Name | PascalCase}}Callback)({{CallbackArgs .}})`
{{-       end}}
{{-     end}}
{{-   end}}
{{  end}}
